/**
 * @param {number[][]} customers
 * @return {number}
 */
var averageWaitingTime = function (customers) {
  let sum = customers.reduce((acc, cur) => {
    return acc + cur[1]
  }, 0)

  let endTime = customers[0][0] + customers[0][1]

  for (let i = 1; i < customers.length; i++) {
    if (endTime - customers[i][0] > 0) {
      sum += endTime - customers[i][0]
      endTime += customers[i][1]
    } else {
      endTime = customers[i][0] + customers[i][1]
    }
  }

  return sum / customers.length
}

/** 
그리고 [도착, 시간]. 도착시간은 내림차순. 
도착 = i번째 손님의 도착시간. 도착시간은 내림차순으로 정렬되어있다.
시간 = i번째 손님의 주문을 준비하는데 걸리는 시간

손님이 도착할 때, 그는 그의 주문을 주방장에게 건내준다. 그리고 주방장은 그것을 준비하기 시작한다. 
손님은 그의 주문이 준비될때까지 기다릴 것이다. 주방장은 한번에 하나의 음식만 준비한다. 
주방장은 받은 주문 순서대로만 준비한다. (큐?) 
손님들이 평균적으로 기다리는 시간을 반환하라. 

1번 손님은 1시에 왔다. 그리고 그의 주문은 2시간이 걸린다. (2시간 기다림)
2번 손님은 2시에 왔다. 그리고 그의 주문은 5시간이 걸린다. (3시부터 5시간 : 6시간 기다림)
3번 손님은 4시에 왔다. 그리고 그의 주문은 3시간이 걸린다. (8시에 주문 시작 - 3시간 : 7시간)
총 15시간. / 3 = 5 이다. 


그러면 이 문제를 어떻게 풀 것인가? 
일단. 결국 각 사람이 기다린 시간을 구해야한다. waiting time. 
문제는 무조건 O(N)으로 풀어야 할 것 같다. 입력값이 크다. 

일단 총 주문 시간을 더한다. 무조건 그 이상이기 때문에, 여기서 추가적으로 기다린 시간만 추가하면 된다. 
추가적으로 기다린 시간을 구하는 방법은, 
주문 완료 시간에서 도착시간을 빼면된다. 
예를 들어, 손님 1의 주문 완료 시간이 3시다. 그리고 도착시간이 2시면 (3-2)를 해서 1이 되는 것이다. 
그러면 추가시간은 1이다. 1을 answer에 +=1 해준다. 
3시부터 2번 손님의 주문이 시작되고, 주문이 완료된 시간이 8시다.3번손님은4시 왔다. (8-4) = 4. 
추가시간이 +4이다. 
2 5 3 + 5 = 15. 

끝나는 시간은, 시작 시간에 주문 시간을 더하면 된다. 

5 + 2. => 끝나는 시간 : 7

5 + 2 + 4 => 끝나는 시간 : 11
끝나는 시간 - 도착시간 (11 - 5) : 6

5 + 2 + 4 + 3 => 끝나는 시간 : 14 
끝나는 시간 - 도착시간 (14 - 10) : 4

5 + 2 + 4 + 3 + 1 => 끝나는 시간 : 15 
끝나는 시간 - 도착시간 (15 - 20) : -5 => 이런 경우엔 예외처리. 


*/
